import { PWA_CACHE } from '../src/lib/cache-name.ts';
import { staticAssets } from './sw-assets.js'; // generated by generate-sw-assets
const cacheName = PWA_CACHE;

// `self.__WB_MANIFEST` will be replaced at build time by VitePWA with an array
// of precache entries containing the hashed asset filenames produced during the
// build. In dev this will be an empty array.
const buildAssets = (self.__WB_MANIFEST || []).map((entry) => entry.url);

self.addEventListener('install', (event) => {
  const assetsToCache = [...staticAssets, ...buildAssets];
  event.waitUntil(
    caches.open(cacheName).then((cache) => cache.addAll(assetsToCache)),
  );
  self.skipWaiting();
});

self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches
      .keys()
      .then((keys) =>
        Promise.all(
          keys
            .filter((name) => name !== cacheName)
            .map((name) => caches.delete(name)),
        ),
      )
      .then(() => clients.claim()),
  );
});

self.addEventListener('fetch', (event) => {
  event.respondWith(
    (async () => {
      const cached = await caches.match(event.request);
      if (cached) return cached;
      try {
        return await fetch(event.request);
      } catch {
        if (event.request.mode === 'navigate') {
          const fallback = await caches.match('/index.html');
          if (fallback) return fallback;
        }
        return Response.error();
      }
    })(),
  );
});
